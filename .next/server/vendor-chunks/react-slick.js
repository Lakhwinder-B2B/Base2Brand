"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-slick";
exports.ids = ["vendor-chunks/react-slick"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-slick/lib/arrows.js":
/*!************************************************!*\
  !*** ./node_modules/react-slick/lib/arrows.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.NextArrow = exports.PrevArrow = undefined;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _classnames = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\nvar _classnames2 = _interopRequireDefault(_classnames);\nvar _helpers = __webpack_require__(/*! ./mixins/helpers */ \"(ssr)/./node_modules/react-slick/lib/mixins/helpers.js\");\nvar _helpers2 = _interopRequireDefault(_helpers);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar PrevArrow = exports.PrevArrow = function(_React$Component) {\n    _inherits(PrevArrow, _React$Component);\n    function PrevArrow() {\n        _classCallCheck(this, PrevArrow);\n        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n    }\n    PrevArrow.prototype.clickHandler = function clickHandler(options, e) {\n        if (e) {\n            e.preventDefault();\n        }\n        this.props.clickHandler(options, e);\n    };\n    PrevArrow.prototype.render = function render() {\n        var prevClasses = {\n            \"slick-arrow\": true,\n            \"slick-prev\": true\n        };\n        var prevHandler = this.clickHandler.bind(this, {\n            message: \"previous\"\n        });\n        if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {\n            prevClasses[\"slick-disabled\"] = true;\n            prevHandler = null;\n        }\n        var prevArrowProps = {\n            key: \"0\",\n            \"data-role\": \"none\",\n            className: (0, _classnames2.default)(prevClasses),\n            style: {\n                display: \"block\"\n            },\n            onClick: prevHandler\n        };\n        var customProps = {\n            currentSlide: this.props.currentSlide,\n            slideCount: this.props.slideCount\n        };\n        var prevArrow;\n        if (this.props.prevArrow) {\n            prevArrow = _react2.default.cloneElement(this.props.prevArrow, _extends({}, prevArrowProps, customProps));\n        } else {\n            prevArrow = _react2.default.createElement(\"button\", _extends({\n                key: \"0\",\n                type: \"button\"\n            }, prevArrowProps), \" Previous\");\n        }\n        return prevArrow;\n    };\n    return PrevArrow;\n}(_react2.default.Component);\nvar NextArrow = exports.NextArrow = function(_React$Component2) {\n    _inherits(NextArrow, _React$Component2);\n    function NextArrow() {\n        _classCallCheck(this, NextArrow);\n        return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n    }\n    NextArrow.prototype.clickHandler = function clickHandler(options, e) {\n        if (e) {\n            e.preventDefault();\n        }\n        this.props.clickHandler(options, e);\n    };\n    NextArrow.prototype.render = function render() {\n        var nextClasses = {\n            \"slick-arrow\": true,\n            \"slick-next\": true\n        };\n        var nextHandler = this.clickHandler.bind(this, {\n            message: \"next\"\n        });\n        if (!_helpers2.default.canGoNext(this.props)) {\n            nextClasses[\"slick-disabled\"] = true;\n            nextHandler = null;\n        }\n        var nextArrowProps = {\n            key: \"1\",\n            \"data-role\": \"none\",\n            className: (0, _classnames2.default)(nextClasses),\n            style: {\n                display: \"block\"\n            },\n            onClick: nextHandler\n        };\n        var customProps = {\n            currentSlide: this.props.currentSlide,\n            slideCount: this.props.slideCount\n        };\n        var nextArrow;\n        if (this.props.nextArrow) {\n            nextArrow = _react2.default.cloneElement(this.props.nextArrow, _extends({}, nextArrowProps, customProps));\n        } else {\n            nextArrow = _react2.default.createElement(\"button\", _extends({\n                key: \"1\",\n                type: \"button\"\n            }, nextArrowProps), \" Next\");\n        }\n        return nextArrow;\n    };\n    return NextArrow;\n}(_react2.default.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/arrows.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/default-props.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-slick/lib/default-props.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar defaultProps = {\n    className: \"\",\n    accessibility: true,\n    adaptiveHeight: false,\n    arrows: true,\n    autoplay: false,\n    autoplaySpeed: 3000,\n    centerMode: false,\n    centerPadding: \"50px\",\n    cssEase: \"ease\",\n    customPaging: function customPaging(i) {\n        return _react2.default.createElement(\"button\", null, i + 1);\n    },\n    dots: false,\n    dotsClass: \"slick-dots\",\n    draggable: true,\n    easing: \"linear\",\n    edgeFriction: 0.35,\n    fade: false,\n    focusOnSelect: false,\n    infinite: true,\n    initialSlide: 0,\n    lazyLoad: false,\n    pauseOnHover: true,\n    responsive: null,\n    rtl: false,\n    slide: \"div\",\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    speed: 500,\n    swipe: true,\n    swipeToSlide: false,\n    touchMove: true,\n    touchThreshold: 5,\n    useCSS: true,\n    variableWidth: false,\n    vertical: false,\n    waitForAnimate: true,\n    afterChange: null,\n    beforeChange: null,\n    edgeEvent: null,\n    init: null,\n    swipeEvent: null,\n    // nextArrow, prevArrow are react componets\n    nextArrow: null,\n    prevArrow: null\n};\nmodule.exports = defaultProps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQixJQUFJQyxVQUFVQyx1QkFBdUJIO0FBRXJDLFNBQVNHLHVCQUF1QkMsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsSUFBSUcsZUFBZTtJQUNmQyxXQUFXO0lBQ1hDLGVBQWU7SUFDZkMsZ0JBQWdCO0lBQ2hCQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVkMsZUFBZTtJQUNmQyxZQUFZO0lBQ1pDLGVBQWU7SUFDZkMsU0FBUztJQUNUQyxjQUFjLFNBQVNBLGFBQWFDLENBQUM7UUFDakMsT0FBT2hCLFFBQVFJLE9BQU8sQ0FBQ2EsYUFBYSxDQUNoQyxVQUNBLE1BQ0FELElBQUk7SUFFWjtJQUNBRSxNQUFNO0lBQ05DLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxRQUFRO0lBQ1JDLGNBQWM7SUFDZEMsTUFBTTtJQUNOQyxlQUFlO0lBQ2ZDLFVBQVU7SUFDVkMsY0FBYztJQUNkQyxVQUFVO0lBQ1ZDLGNBQWM7SUFDZEMsWUFBWTtJQUNaQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsZ0JBQWdCO0lBQ2hCQyxRQUFRO0lBQ1JDLGVBQWU7SUFDZkMsVUFBVTtJQUNWQyxnQkFBZ0I7SUFDaEJDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLE1BQU07SUFDTkMsWUFBWTtJQUNaLDJDQUEyQztJQUMzQ0MsV0FBVztJQUNYQyxXQUFXO0FBQ2Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iMmIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanM/Yzk1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgIGFycm93czogdHJ1ZSxcbiAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24gY3VzdG9tUGFnaW5nKGkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaSArIDFcbiAgICAgICAgKTtcbiAgICB9LFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICBmYWRlOiBmYWxzZSxcbiAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgbGF6eUxvYWQ6IGZhbHNlLFxuICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICByZXNwb25zaXZlOiBudWxsLFxuICAgIHJ0bDogZmFsc2UsXG4gICAgc2xpZGU6ICdkaXYnLFxuICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICBzcGVlZDogNTAwLFxuICAgIHN3aXBlOiB0cnVlLFxuICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgIHVzZUNTUzogdHJ1ZSxcbiAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgYWZ0ZXJDaGFuZ2U6IG51bGwsXG4gICAgYmVmb3JlQ2hhbmdlOiBudWxsLFxuICAgIGVkZ2VFdmVudDogbnVsbCxcbiAgICBpbml0OiBudWxsLFxuICAgIHN3aXBlRXZlbnQ6IG51bGwsXG4gICAgLy8gbmV4dEFycm93LCBwcmV2QXJyb3cgYXJlIHJlYWN0IGNvbXBvbmV0c1xuICAgIG5leHRBcnJvdzogbnVsbCxcbiAgICBwcmV2QXJyb3c6IG51bGxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdFByb3BzOyJdLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlZmF1bHRQcm9wcyIsImNsYXNzTmFtZSIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImFycm93cyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY3NzRWFzZSIsImN1c3RvbVBhZ2luZyIsImkiLCJjcmVhdGVFbGVtZW50IiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVhc2luZyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiaW5maW5pdGUiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsInBhdXNlT25Ib3ZlciIsInJlc3BvbnNpdmUiLCJydGwiLCJzbGlkZSIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3BlZWQiLCJzd2lwZSIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwid2FpdEZvckFuaW1hdGUiLCJhZnRlckNoYW5nZSIsImJlZm9yZUNoYW5nZSIsImVkZ2VFdmVudCIsImluaXQiLCJzd2lwZUV2ZW50IiwibmV4dEFycm93IiwicHJldkFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/default-props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/dots.js":
/*!**********************************************!*\
  !*** ./node_modules/react-slick/lib/dots.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.Dots = undefined;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _classnames = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\nvar _classnames2 = _interopRequireDefault(_classnames);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar getDotCount = function getDotCount(spec) {\n    var dots;\n    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);\n    return dots;\n};\nvar Dots = exports.Dots = function(_React$Component) {\n    _inherits(Dots, _React$Component);\n    function Dots() {\n        _classCallCheck(this, Dots);\n        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n    }\n    Dots.prototype.clickHandler = function clickHandler(options, e) {\n        // In Autoplay the focus stays on clicked button even after transition\n        // to next slide. That only goes away by click somewhere outside\n        e.preventDefault();\n        this.props.clickHandler(options);\n    };\n    Dots.prototype.render = function render() {\n        var _this2 = this;\n        var dotCount = getDotCount({\n            slideCount: this.props.slideCount,\n            slidesToScroll: this.props.slidesToScroll\n        });\n        // Apply join & split to Array to pre-fill it for IE8\n        //\n        // Credit: http://stackoverflow.com/a/13735425/1849458\n        var dots = Array.apply(null, Array(dotCount + 1).join(\"0\").split(\"\")).map(function(x, i) {\n            var leftBound = i * _this2.props.slidesToScroll;\n            var rightBound = i * _this2.props.slidesToScroll + (_this2.props.slidesToScroll - 1);\n            var className = (0, _classnames2.default)({\n                \"slick-active\": _this2.props.currentSlide >= leftBound && _this2.props.currentSlide <= rightBound\n            });\n            var dotOptions = {\n                message: \"dots\",\n                index: i,\n                slidesToScroll: _this2.props.slidesToScroll,\n                currentSlide: _this2.props.currentSlide\n            };\n            var onClick = _this2.clickHandler.bind(_this2, dotOptions);\n            return _react2.default.createElement(\"li\", {\n                key: i,\n                className: className\n            }, _react2.default.cloneElement(_this2.props.customPaging(i), {\n                onClick: onClick\n            }));\n        });\n        return _react2.default.createElement(\"ul\", {\n            className: this.props.dotsClass,\n            style: {\n                display: \"block\"\n            }\n        }, dots);\n    };\n    return Dots;\n}(_react2.default.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/dots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-slick/lib/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./slider */ \"(ssr)/./node_modules/react-slick/lib/slider.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLHNHQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2IyYi8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvaW5kZXguanM/YTA3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zbGlkZXInKTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/initial-state.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-slick/lib/initial-state.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nvar initialState = {\n    animating: false,\n    dragging: false,\n    autoPlayTimer: null,\n    currentDirection: 0,\n    currentLeft: null,\n    currentSlide: 0,\n    direction: 1,\n    listWidth: null,\n    listHeight: null,\n    scrolling: false,\n    // loadIndex: 0,\n    slideCount: null,\n    slideWidth: null,\n    slideHeight: null,\n    swiping: false,\n    // sliding: false,\n    // slideOffset: 0,\n    swipeLeft: null,\n    touchObject: {\n        startX: 0,\n        startY: 0,\n        curX: 0,\n        curY: 0\n    },\n    lazyLoadedList: [],\n    // added for react\n    initialized: false,\n    edgeDragged: false,\n    swiped: false,\n    trackStyle: {},\n    trackWidth: 0\n};\nmodule.exports = initialState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxlQUFlO0lBQ2ZDLFdBQVc7SUFDWEMsVUFBVTtJQUNWQyxlQUFlO0lBQ2ZDLGtCQUFrQjtJQUNsQkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxZQUFZO0lBQ1pDLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEJDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLFNBQVM7SUFDVCxrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCQyxXQUFXO0lBQ1hDLGFBQWE7UUFDVEMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLE1BQU07UUFDTkMsTUFBTTtJQUNWO0lBRUFDLGdCQUFnQixFQUFFO0lBRWxCLGtCQUFrQjtJQUNsQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLFFBQVE7SUFDUkMsWUFBWSxDQUFDO0lBQ2JDLFlBQVk7QUFVaEI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iMmIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanM/NjM1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgY3VycmVudFNsaWRlOiAwLFxuICAgIGRpcmVjdGlvbjogMSxcbiAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICBzY3JvbGxpbmc6IGZhbHNlLFxuICAgIC8vIGxvYWRJbmRleDogMCxcbiAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgc2xpZGVIZWlnaHQ6IG51bGwsXG4gICAgc3dpcGluZzogZmFsc2UsXG4gICAgLy8gc2xpZGluZzogZmFsc2UsXG4gICAgLy8gc2xpZGVPZmZzZXQ6IDAsXG4gICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgIHRvdWNoT2JqZWN0OiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJYOiAwLFxuICAgICAgICBjdXJZOiAwXG4gICAgfSxcblxuICAgIGxhenlMb2FkZWRMaXN0OiBbXSxcblxuICAgIC8vIGFkZGVkIGZvciByZWFjdFxuICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gICAgc3dpcGVkOiBmYWxzZSwgLy8gdXNlZCBieSBzd2lwZUV2ZW50LiBkaWZmZXJlbnRpdGVzIGJldHdlZW4gdG91Y2ggYW5kIHN3aXBlLlxuICAgIHRyYWNrU3R5bGU6IHt9LFxuICAgIHRyYWNrV2lkdGg6IDBcblxuICAgIC8vIFJlbW92ZWRcbiAgICAvLyB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgLy8gJG5leHRBcnJvdzogbnVsbCxcbiAgICAvLyAkcHJldkFycm93OiBudWxsLFxuICAgIC8vICRkb3RzOiBudWxsLFxuICAgIC8vICRsaXN0OiBudWxsLFxuICAgIC8vICRzbGlkZVRyYWNrOiBudWxsLFxuICAgIC8vICRzbGlkZXM6IG51bGwsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRpYWxTdGF0ZTsiXSwibmFtZXMiOlsiaW5pdGlhbFN0YXRlIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiZGlyZWN0aW9uIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwic2xpZGVIZWlnaHQiLCJzd2lwaW5nIiwic3dpcGVMZWZ0IiwidG91Y2hPYmplY3QiLCJzdGFydFgiLCJzdGFydFkiLCJjdXJYIiwiY3VyWSIsImxhenlMb2FkZWRMaXN0IiwiaW5pdGlhbGl6ZWQiLCJlZGdlRHJhZ2dlZCIsInN3aXBlZCIsInRyYWNrU3R5bGUiLCJ0cmFja1dpZHRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/initial-state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/inner-slider.js":
/*!******************************************************!*\
  !*** ./node_modules/react-slick/lib/inner-slider.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.InnerSlider = undefined;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _eventHandlers = __webpack_require__(/*! ./mixins/event-handlers */ \"(ssr)/./node_modules/react-slick/lib/mixins/event-handlers.js\");\nvar _eventHandlers2 = _interopRequireDefault(_eventHandlers);\nvar _helpers = __webpack_require__(/*! ./mixins/helpers */ \"(ssr)/./node_modules/react-slick/lib/mixins/helpers.js\");\nvar _helpers2 = _interopRequireDefault(_helpers);\nvar _initialState = __webpack_require__(/*! ./initial-state */ \"(ssr)/./node_modules/react-slick/lib/initial-state.js\");\nvar _initialState2 = _interopRequireDefault(_initialState);\nvar _defaultProps = __webpack_require__(/*! ./default-props */ \"(ssr)/./node_modules/react-slick/lib/default-props.js\");\nvar _defaultProps2 = _interopRequireDefault(_defaultProps);\nvar _createReactClass = __webpack_require__(/*! create-react-class */ \"(ssr)/./node_modules/create-react-class/index.js\");\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\nvar _classnames = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\nvar _classnames2 = _interopRequireDefault(_classnames);\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nvar _track = __webpack_require__(/*! ./track */ \"(ssr)/./node_modules/react-slick/lib/track.js\");\nvar _dots = __webpack_require__(/*! ./dots */ \"(ssr)/./node_modules/react-slick/lib/dots.js\");\nvar _arrows = __webpack_require__(/*! ./arrows */ \"(ssr)/./node_modules/react-slick/lib/arrows.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar InnerSlider = exports.InnerSlider = (0, _createReactClass2.default)({\n    displayName: \"InnerSlider\",\n    mixins: [\n        _helpers2.default,\n        _eventHandlers2.default\n    ],\n    list: null,\n    track: null,\n    listRefHandler: function listRefHandler(ref) {\n        this.list = ref;\n    },\n    trackRefHandler: function trackRefHandler(ref) {\n        this.track = ref;\n    },\n    getInitialState: function getInitialState() {\n        return _extends({}, _initialState2.default, {\n            currentSlide: this.props.initialSlide\n        });\n    },\n    getDefaultProps: function getDefaultProps() {\n        return _defaultProps2.default;\n    },\n    componentWillMount: function componentWillMount() {\n        if (this.props.init) {\n            this.props.init();\n        }\n        this.setState({\n            mounted: true\n        });\n        var lazyLoadedList = [];\n        for(var i = 0; i < _react2.default.Children.count(this.props.children); i++){\n            if (i >= this.state.currentSlide && i < this.state.currentSlide + this.props.slidesToShow) {\n                lazyLoadedList.push(i);\n            }\n        }\n        if (this.props.lazyLoad && this.state.lazyLoadedList.length === 0) {\n            this.setState({\n                lazyLoadedList: lazyLoadedList\n            });\n        }\n    },\n    componentDidMount: function componentDidMount() {\n        // Hack for autoplay -- Inspect Later\n        this.initialize(this.props);\n        this.adaptHeight();\n        // To support server-side rendering\n        if (!window) {\n            return;\n        }\n        if (window.addEventListener) {\n            window.addEventListener(\"resize\", this.onWindowResized);\n        } else {\n            window.attachEvent(\"onresize\", this.onWindowResized);\n        }\n    },\n    componentWillUnmount: function componentWillUnmount() {\n        if (this.animationEndCallback) {\n            clearTimeout(this.animationEndCallback);\n        }\n        if (window.addEventListener) {\n            window.removeEventListener(\"resize\", this.onWindowResized);\n        } else {\n            window.detachEvent(\"onresize\", this.onWindowResized);\n        }\n        if (this.state.autoPlayTimer) {\n            clearInterval(this.state.autoPlayTimer);\n        }\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        if (this.props.slickGoTo != nextProps.slickGoTo) {\n            if (true) {\n                console.warn(\"react-slick deprecation warning: slickGoTo prop is deprecated and it will be removed in next release. Use slickGoTo method instead\");\n            }\n            this.changeSlide({\n                message: \"index\",\n                index: nextProps.slickGoTo,\n                currentSlide: this.state.currentSlide\n            });\n        } else if (this.state.currentSlide >= nextProps.children.length) {\n            this.update(nextProps);\n            this.changeSlide({\n                message: \"index\",\n                index: nextProps.children.length - nextProps.slidesToShow,\n                currentSlide: this.state.currentSlide\n            });\n        } else {\n            this.update(nextProps);\n        }\n    },\n    componentDidUpdate: function componentDidUpdate() {\n        this.adaptHeight();\n    },\n    onWindowResized: function onWindowResized() {\n        this.update(this.props);\n        // animating state should be cleared while resizing, otherwise autoplay stops working\n        this.setState({\n            animating: false\n        });\n        clearTimeout(this.animationEndCallback);\n        delete this.animationEndCallback;\n    },\n    slickPrev: function slickPrev() {\n        this.changeSlide({\n            message: \"previous\"\n        });\n    },\n    slickNext: function slickNext() {\n        this.changeSlide({\n            message: \"next\"\n        });\n    },\n    slickGoTo: function slickGoTo(slide) {\n        slide = Number(slide);\n        !isNaN(slide) && this.changeSlide({\n            message: \"index\",\n            index: slide,\n            currentSlide: this.state.currentSlide\n        });\n    },\n    render: function render() {\n        var className = (0, _classnames2.default)(\"slick-initialized\", \"slick-slider\", this.props.className, {\n            \"slick-vertical\": this.props.vertical\n        });\n        var trackProps = {\n            fade: this.props.fade,\n            cssEase: this.props.cssEase,\n            speed: this.props.speed,\n            infinite: this.props.infinite,\n            centerMode: this.props.centerMode,\n            focusOnSelect: this.props.focusOnSelect ? this.selectHandler : null,\n            currentSlide: this.state.currentSlide,\n            lazyLoad: this.props.lazyLoad,\n            lazyLoadedList: this.state.lazyLoadedList,\n            rtl: this.props.rtl,\n            slideWidth: this.state.slideWidth,\n            slidesToShow: this.props.slidesToShow,\n            slidesToScroll: this.props.slidesToScroll,\n            slideCount: this.state.slideCount,\n            trackStyle: this.state.trackStyle,\n            variableWidth: this.props.variableWidth\n        };\n        var dots;\n        if (this.props.dots === true && this.state.slideCount >= this.props.slidesToShow) {\n            var dotProps = {\n                dotsClass: this.props.dotsClass,\n                slideCount: this.state.slideCount,\n                slidesToShow: this.props.slidesToShow,\n                currentSlide: this.state.currentSlide,\n                slidesToScroll: this.props.slidesToScroll,\n                clickHandler: this.changeSlide,\n                children: this.props.children,\n                customPaging: this.props.customPaging\n            };\n            dots = _react2.default.createElement(_dots.Dots, dotProps);\n        }\n        var prevArrow, nextArrow;\n        var arrowProps = {\n            infinite: this.props.infinite,\n            centerMode: this.props.centerMode,\n            currentSlide: this.state.currentSlide,\n            slideCount: this.state.slideCount,\n            slidesToShow: this.props.slidesToShow,\n            prevArrow: this.props.prevArrow,\n            nextArrow: this.props.nextArrow,\n            clickHandler: this.changeSlide\n        };\n        if (this.props.arrows) {\n            prevArrow = _react2.default.createElement(_arrows.PrevArrow, arrowProps);\n            nextArrow = _react2.default.createElement(_arrows.NextArrow, arrowProps);\n        }\n        var verticalHeightStyle = null;\n        if (this.props.vertical) {\n            verticalHeightStyle = {\n                height: this.state.listHeight\n            };\n        }\n        var centerPaddingStyle = null;\n        if (this.props.vertical === false) {\n            if (this.props.centerMode === true) {\n                centerPaddingStyle = {\n                    padding: \"0px \" + this.props.centerPadding\n                };\n            }\n        } else {\n            if (this.props.centerMode === true) {\n                centerPaddingStyle = {\n                    padding: this.props.centerPadding + \" 0px\"\n                };\n            }\n        }\n        var listStyle = (0, _objectAssign2.default)({}, verticalHeightStyle, centerPaddingStyle);\n        return _react2.default.createElement(\"div\", {\n            className: className,\n            onMouseEnter: this.onInnerSliderEnter,\n            onMouseLeave: this.onInnerSliderLeave,\n            onMouseOver: this.onInnerSliderOver\n        }, prevArrow, _react2.default.createElement(\"div\", {\n            ref: this.listRefHandler,\n            className: \"slick-list\",\n            style: listStyle,\n            onMouseDown: this.swipeStart,\n            onMouseMove: this.state.dragging ? this.swipeMove : null,\n            onMouseUp: this.swipeEnd,\n            onMouseLeave: this.state.dragging ? this.swipeEnd : null,\n            onTouchStart: this.swipeStart,\n            onTouchMove: this.state.dragging ? this.swipeMove : null,\n            onTouchEnd: this.swipeEnd,\n            onTouchCancel: this.state.dragging ? this.swipeEnd : null,\n            onKeyDown: this.props.accessibility ? this.keyHandler : null\n        }, _react2.default.createElement(_track.Track, _extends({\n            ref: this.trackRefHandler\n        }, trackProps), this.props.children)), nextArrow, dots);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/inner-slider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/mixins/event-handlers.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-slick/lib/mixins/event-handlers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _trackHelper = __webpack_require__(/*! ./trackHelper */ \"(ssr)/./node_modules/react-slick/lib/mixins/trackHelper.js\");\nvar _helpers = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/react-slick/lib/mixins/helpers.js\");\nvar _helpers2 = _interopRequireDefault(_helpers);\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nvar _reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar _reactDom2 = _interopRequireDefault(_reactDom);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar EventHandlers = {\n    // Event handler for previous and next\n    changeSlide: function changeSlide(options) {\n        var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;\n        var _props = this.props, slidesToScroll = _props.slidesToScroll, slidesToShow = _props.slidesToShow;\n        var _state = this.state, slideCount = _state.slideCount, currentSlide = _state.currentSlide;\n        unevenOffset = slideCount % slidesToScroll !== 0;\n        indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;\n        if (options.message === \"previous\") {\n            slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;\n            targetSlide = currentSlide - slideOffset;\n            if (this.props.lazyLoad) {\n                previousInt = currentSlide - slideOffset;\n                targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;\n            }\n        } else if (options.message === \"next\") {\n            slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;\n            targetSlide = currentSlide + slideOffset;\n            if (this.props.lazyLoad) {\n                targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;\n            }\n        } else if (options.message === \"dots\" || options.message === \"children\") {\n            // Click on dots\n            targetSlide = options.index * options.slidesToScroll;\n            if (targetSlide === options.currentSlide) {\n                return;\n            }\n        } else if (options.message === \"index\") {\n            targetSlide = Number(options.index);\n            if (targetSlide === options.currentSlide) {\n                return;\n            }\n        }\n        this.slideHandler(targetSlide);\n    },\n    // Accessiblity handler for previous and next\n    keyHandler: function keyHandler(e) {\n        //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if (!e.target.tagName.match(\"TEXTAREA|INPUT|SELECT\")) {\n            if (e.keyCode === 37 && this.props.accessibility === true) {\n                this.changeSlide({\n                    message: this.props.rtl === true ? \"next\" : \"previous\"\n                });\n            } else if (e.keyCode === 39 && this.props.accessibility === true) {\n                this.changeSlide({\n                    message: this.props.rtl === true ? \"previous\" : \"next\"\n                });\n            }\n        }\n    },\n    // Focus on selecting a slide (click handler on track)\n    selectHandler: function selectHandler(options) {\n        this.changeSlide(options);\n    },\n    swipeStart: function swipeStart(e) {\n        var touches, posX, posY;\n        if (this.props.swipe === false || \"ontouchend\" in document && this.props.swipe === false) {\n            return;\n        } else if (this.props.draggable === false && e.type.indexOf(\"mouse\") !== -1) {\n            return;\n        }\n        posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;\n        posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;\n        this.setState({\n            dragging: true,\n            touchObject: {\n                startX: posX,\n                startY: posY,\n                curX: posX,\n                curY: posY\n            }\n        });\n    },\n    swipeMove: function swipeMove(e) {\n        if (!this.state.dragging) {\n            e.preventDefault();\n            return;\n        }\n        if (this.state.scrolling) {\n            return;\n        }\n        if (this.state.animating) {\n            e.preventDefault();\n            return;\n        }\n        if (this.props.vertical && this.props.swipeToSlide && this.props.verticalSwiping) {\n            e.preventDefault();\n        }\n        var swipeLeft;\n        var curLeft, positionOffset;\n        var touchObject = this.state.touchObject;\n        curLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n            slideIndex: this.state.currentSlide,\n            trackRef: this.track\n        }, this.props, this.state));\n        touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;\n        touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;\n        touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));\n        var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));\n        if (!this.props.verticalSwiping && !this.state.swiping && verticalSwipeLength > 4) {\n            this.setState({\n                scrolling: true\n            });\n            return;\n        }\n        if (this.props.verticalSwiping) {\n            touchObject.swipeLength = verticalSwipeLength;\n        }\n        positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);\n        if (this.props.verticalSwiping) {\n            positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;\n        }\n        var currentSlide = this.state.currentSlide;\n        var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);\n        var swipeDirection = this.swipeDirection(this.state.touchObject);\n        var touchSwipeLength = touchObject.swipeLength;\n        if (this.props.infinite === false) {\n            if (currentSlide === 0 && swipeDirection === \"right\" || currentSlide + 1 >= dotCount && swipeDirection === \"left\") {\n                touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;\n                if (this.state.edgeDragged === false && this.props.edgeEvent) {\n                    this.props.edgeEvent(swipeDirection);\n                    this.setState({\n                        edgeDragged: true\n                    });\n                }\n            }\n        }\n        if (this.state.swiped === false && this.props.swipeEvent) {\n            this.props.swipeEvent(swipeDirection);\n            this.setState({\n                swiped: true\n            });\n        }\n        if (!this.props.vertical) {\n            swipeLeft = curLeft + touchSwipeLength * positionOffset;\n        } else {\n            swipeLeft = curLeft + touchSwipeLength * (this.state.listHeight / this.state.listWidth) * positionOffset;\n        }\n        if (this.props.verticalSwiping) {\n            swipeLeft = curLeft + touchSwipeLength * positionOffset;\n        }\n        this.setState({\n            touchObject: touchObject,\n            swipeLeft: swipeLeft,\n            trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n                left: swipeLeft\n            }, this.props, this.state))\n        });\n        if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {\n            return;\n        }\n        if (touchObject.swipeLength > 4) {\n            this.setState({\n                swiping: true\n            });\n            e.preventDefault();\n        }\n    },\n    getNavigableIndexes: function getNavigableIndexes() {\n        var max = void 0;\n        var breakPoint = 0;\n        var counter = 0;\n        var indexes = [];\n        if (!this.props.infinite) {\n            max = this.state.slideCount;\n        } else {\n            breakPoint = this.props.slidesToShow * -1;\n            counter = this.props.slidesToShow * -1;\n            max = this.state.slideCount * 2;\n        }\n        while(breakPoint < max){\n            indexes.push(breakPoint);\n            breakPoint = counter + this.props.slidesToScroll;\n            counter += this.props.slidesToScroll <= this.props.slidesToShow ? this.props.slidesToScroll : this.props.slidesToShow;\n        }\n        return indexes;\n    },\n    checkNavigable: function checkNavigable(index) {\n        var navigables = this.getNavigableIndexes();\n        var prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for(var n in navigables){\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n        return index;\n    },\n    getSlideCount: function getSlideCount() {\n        var _this = this;\n        var centerOffset = this.props.centerMode ? this.state.slideWidth * Math.floor(this.props.slidesToShow / 2) : 0;\n        if (this.props.swipeToSlide) {\n            var swipedSlide = void 0;\n            var slickList = _reactDom2.default.findDOMNode(this.list);\n            var slides = slickList.querySelectorAll(\".slick-slide\");\n            Array.from(slides).every(function(slide) {\n                if (!_this.props.vertical) {\n                    if (slide.offsetLeft - centerOffset + _this.getWidth(slide) / 2 > _this.state.swipeLeft * -1) {\n                        swipedSlide = slide;\n                        return false;\n                    }\n                } else {\n                    if (slide.offsetTop + _this.getHeight(slide) / 2 > _this.state.swipeLeft * -1) {\n                        swipedSlide = slide;\n                        return false;\n                    }\n                }\n                return true;\n            });\n            var slidesTraversed = Math.abs(swipedSlide.dataset.index - this.state.currentSlide) || 1;\n            return slidesTraversed;\n        } else {\n            return this.props.slidesToScroll;\n        }\n    },\n    swipeEnd: function swipeEnd(e) {\n        if (!this.state.dragging) {\n            if (this.props.swipe) {\n                e.preventDefault();\n            }\n            return;\n        }\n        var touchObject = this.state.touchObject;\n        var minSwipe = this.state.listWidth / this.props.touchThreshold;\n        var swipeDirection = this.swipeDirection(touchObject);\n        if (this.props.verticalSwiping) {\n            minSwipe = this.state.listHeight / this.props.touchThreshold;\n        }\n        var wasScrolling = this.state.scrolling;\n        // reset the state of touch related state variables.\n        this.setState({\n            dragging: false,\n            edgeDragged: false,\n            scrolling: false,\n            swiping: false,\n            swiped: false,\n            swipeLeft: null,\n            touchObject: {}\n        });\n        if (wasScrolling) {\n            return;\n        }\n        // Fix for #13\n        if (!touchObject.swipeLength) {\n            return;\n        }\n        if (touchObject.swipeLength > minSwipe) {\n            e.preventDefault();\n            var slideCount = void 0, newSlide = void 0;\n            switch(swipeDirection){\n                case \"left\":\n                case \"down\":\n                    newSlide = this.state.currentSlide + this.getSlideCount();\n                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;\n                    this.state.currentDirection = 0;\n                    break;\n                case \"right\":\n                case \"up\":\n                    newSlide = this.state.currentSlide - this.getSlideCount();\n                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;\n                    this.state.currentDirection = 1;\n                    break;\n                default:\n                    slideCount = this.state.currentSlide;\n            }\n            this.slideHandler(slideCount);\n        } else {\n            // Adjust the track back to it's original position.\n            var currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n                slideIndex: this.state.currentSlide,\n                trackRef: this.track\n            }, this.props, this.state));\n            this.setState({\n                trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2.default)({\n                    left: currentLeft\n                }, this.props, this.state))\n            });\n        }\n    },\n    onInnerSliderEnter: function onInnerSliderEnter(e) {\n        if (this.props.autoplay && this.props.pauseOnHover) {\n            this.pause();\n        }\n    },\n    onInnerSliderOver: function onInnerSliderOver(e) {\n        if (this.props.autoplay && this.props.pauseOnHover) {\n            this.pause();\n        }\n    },\n    onInnerSliderLeave: function onInnerSliderLeave(e) {\n        if (this.props.autoplay && this.props.pauseOnHover) {\n            this.autoPlay();\n        }\n    }\n};\nexports[\"default\"] = EventHandlers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/mixins/event-handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/mixins/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/react-slick/lib/mixins/helpers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar _reactDom2 = _interopRequireDefault(_reactDom);\nvar _trackHelper = __webpack_require__(/*! ./trackHelper */ \"(ssr)/./node_modules/react-slick/lib/mixins/trackHelper.js\");\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar helpers = {\n    initialize: function initialize(props) {\n        var slickList = _reactDom2.default.findDOMNode(this.list);\n        var slideCount = _react2.default.Children.count(props.children);\n        var listWidth = this.getWidth(slickList);\n        var trackWidth = this.getWidth(_reactDom2.default.findDOMNode(this.track));\n        var slideWidth;\n        if (!props.vertical) {\n            var centerPaddingAdj = props.centerMode && parseInt(props.centerPadding) * 2;\n            slideWidth = (this.getWidth(_reactDom2.default.findDOMNode(this)) - centerPaddingAdj) / props.slidesToShow;\n        } else {\n            slideWidth = this.getWidth(_reactDom2.default.findDOMNode(this));\n        }\n        var slideHeight = this.getHeight(slickList.querySelector('[data-index=\"0\"]'));\n        var listHeight = slideHeight * props.slidesToShow;\n        var currentSlide = props.rtl ? slideCount - 1 - props.initialSlide : props.initialSlide;\n        this.setState({\n            slideCount: slideCount,\n            slideWidth: slideWidth,\n            listWidth: listWidth,\n            trackWidth: trackWidth,\n            currentSlide: currentSlide,\n            slideHeight: slideHeight,\n            listHeight: listHeight\n        }, function() {\n            var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n                slideIndex: this.state.currentSlide,\n                trackRef: this.track\n            }, props, this.state));\n            // getCSS function needs previously set state\n            var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n                left: targetLeft\n            }, props, this.state));\n            this.setState({\n                trackStyle: trackStyle\n            });\n            this.autoPlay(); // once we're set up, trigger the initial autoplay.\n        });\n    },\n    update: function update(props) {\n        var slickList = _reactDom2.default.findDOMNode(this.list);\n        // This method has mostly same code as initialize method.\n        // Refactor it\n        var slideCount = _react2.default.Children.count(props.children);\n        var listWidth = this.getWidth(slickList);\n        var trackWidth = this.getWidth(_reactDom2.default.findDOMNode(this.track));\n        var slideWidth;\n        if (!props.vertical) {\n            var centerPaddingAdj = props.centerMode && parseInt(props.centerPadding) * 2;\n            slideWidth = (this.getWidth(_reactDom2.default.findDOMNode(this)) - centerPaddingAdj) / props.slidesToShow;\n        } else {\n            slideWidth = this.getWidth(_reactDom2.default.findDOMNode(this));\n        }\n        var slideHeight = this.getHeight(slickList.querySelector('[data-index=\"0\"]'));\n        var listHeight = slideHeight * props.slidesToShow;\n        // pause slider if autoplay is set to false\n        if (!props.autoplay) {\n            this.pause();\n        } else {\n            this.autoPlay();\n        }\n        this.setState({\n            slideCount: slideCount,\n            slideWidth: slideWidth,\n            listWidth: listWidth,\n            trackWidth: trackWidth,\n            slideHeight: slideHeight,\n            listHeight: listHeight\n        }, function() {\n            var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n                slideIndex: this.state.currentSlide,\n                trackRef: this.track\n            }, props, this.state));\n            // getCSS function needs previously set state\n            var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n                left: targetLeft\n            }, props, this.state));\n            this.setState({\n                trackStyle: trackStyle\n            });\n        });\n    },\n    getWidth: function getWidth(elem) {\n        return elem && (elem.getBoundingClientRect().width || elem.offsetWidth) || 0;\n    },\n    getHeight: function getHeight(elem) {\n        return elem && (elem.getBoundingClientRect().height || elem.offsetHeight) || 0;\n    },\n    adaptHeight: function adaptHeight() {\n        if (this.props.adaptiveHeight) {\n            var selector = '[data-index=\"' + this.state.currentSlide + '\"]';\n            if (this.list) {\n                var slickList = _reactDom2.default.findDOMNode(this.list);\n                slickList.style.height = slickList.querySelector(selector).offsetHeight + \"px\";\n            }\n        }\n    },\n    canGoNext: function canGoNext(opts) {\n        var canGo = true;\n        if (!opts.infinite) {\n            if (opts.centerMode) {\n                // check if current slide is last slide\n                if (opts.currentSlide >= opts.slideCount - 1) {\n                    canGo = false;\n                }\n            } else {\n                // check if all slides are shown in slider\n                if (opts.slideCount <= opts.slidesToShow || opts.currentSlide >= opts.slideCount - opts.slidesToShow) {\n                    canGo = false;\n                }\n            }\n        }\n        return canGo;\n    },\n    slideHandler: function slideHandler(index) {\n        var _this = this;\n        // Functionality of animateSlide and postSlide is merged into this function\n        // console.log('slideHandler', index);\n        var targetSlide, currentSlide;\n        var targetLeft, currentLeft;\n        var callback;\n        if (this.props.waitForAnimate && this.state.animating) {\n            return;\n        }\n        if (this.props.fade) {\n            currentSlide = this.state.currentSlide;\n            // Don't change slide if it's not infite and current slide is the first or last slide.\n            if (this.props.infinite === false && (index < 0 || index >= this.state.slideCount)) {\n                return;\n            }\n            //  Shifting targetSlide back into the range\n            if (index < 0) {\n                targetSlide = index + this.state.slideCount;\n            } else if (index >= this.state.slideCount) {\n                targetSlide = index - this.state.slideCount;\n            } else {\n                targetSlide = index;\n            }\n            if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {\n                this.setState({\n                    lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)\n                });\n            }\n            callback = function callback() {\n                _this.setState({\n                    animating: false\n                });\n                if (_this.props.afterChange) {\n                    _this.props.afterChange(targetSlide);\n                }\n                delete _this.animationEndCallback;\n            };\n            this.setState({\n                animating: true,\n                currentSlide: targetSlide\n            }, function() {\n                this.animationEndCallback = setTimeout(callback, this.props.speed);\n            });\n            if (this.props.beforeChange) {\n                this.props.beforeChange(this.state.currentSlide, targetSlide);\n            }\n            this.autoPlay();\n            return;\n        }\n        targetSlide = index;\n        if (targetSlide < 0) {\n            if (this.props.infinite === false) {\n                currentSlide = 0;\n            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {\n                currentSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;\n            } else {\n                currentSlide = this.state.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= this.state.slideCount) {\n            if (this.props.infinite === false) {\n                currentSlide = this.state.slideCount - this.props.slidesToShow;\n            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {\n                currentSlide = 0;\n            } else {\n                currentSlide = targetSlide - this.state.slideCount;\n            }\n        } else {\n            currentSlide = targetSlide;\n        }\n        targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n            slideIndex: targetSlide,\n            trackRef: this.track\n        }, this.props, this.state));\n        currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2.default)({\n            slideIndex: currentSlide,\n            trackRef: this.track\n        }, this.props, this.state));\n        if (this.props.infinite === false) {\n            targetLeft = currentLeft;\n        }\n        if (this.props.beforeChange) {\n            this.props.beforeChange(this.state.currentSlide, currentSlide);\n        }\n        if (this.props.lazyLoad) {\n            var loaded = true;\n            var slidesToLoad = [];\n            for(var i = targetSlide; i < targetSlide + this.props.slidesToShow; i++){\n                loaded = loaded && this.state.lazyLoadedList.indexOf(i) >= 0;\n                if (!loaded) {\n                    slidesToLoad.push(i);\n                }\n            }\n            if (!loaded) {\n                this.setState({\n                    lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)\n                });\n            }\n        }\n        // Slide Transition happens here.\n        // animated transition happens to target Slide and\n        // non - animated transition happens to current Slide\n        // If CSS transitions are false, directly go the current slide.\n        if (this.props.useCSS === false) {\n            this.setState({\n                currentSlide: currentSlide,\n                trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n                    left: currentLeft\n                }, this.props, this.state))\n            }, function() {\n                if (this.props.afterChange) {\n                    this.props.afterChange(currentSlide);\n                }\n            });\n        } else {\n            var nextStateChanges = {\n                animating: false,\n                currentSlide: currentSlide,\n                trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2.default)({\n                    left: currentLeft\n                }, this.props, this.state)),\n                swipeLeft: null\n            };\n            callback = function callback() {\n                _this.setState(nextStateChanges);\n                if (_this.props.afterChange) {\n                    _this.props.afterChange(currentSlide);\n                }\n                delete _this.animationEndCallback;\n            };\n            this.setState({\n                animating: true,\n                currentSlide: currentSlide,\n                trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2.default)({\n                    left: targetLeft\n                }, this.props, this.state))\n            }, function() {\n                this.animationEndCallback = setTimeout(callback, this.props.speed);\n            });\n        }\n        this.autoPlay();\n    },\n    swipeDirection: function swipeDirection(touchObject) {\n        var xDist, yDist, r, swipeAngle;\n        xDist = touchObject.startX - touchObject.curX;\n        yDist = touchObject.startY - touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n        if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {\n            return this.props.rtl === false ? \"left\" : \"right\";\n        }\n        if (swipeAngle >= 135 && swipeAngle <= 225) {\n            return this.props.rtl === false ? \"right\" : \"left\";\n        }\n        if (this.props.verticalSwiping === true) {\n            if (swipeAngle >= 35 && swipeAngle <= 135) {\n                return \"down\";\n            } else {\n                return \"up\";\n            }\n        }\n        return \"vertical\";\n    },\n    play: function play() {\n        var nextIndex;\n        if (!this.state.mounted) {\n            return false;\n        }\n        if (this.props.rtl) {\n            nextIndex = this.state.currentSlide - this.props.slidesToScroll;\n        } else {\n            if (this.canGoNext(_extends({}, this.props, this.state))) {\n                nextIndex = this.state.currentSlide + this.props.slidesToScroll;\n            } else {\n                return false;\n            }\n        }\n        this.slideHandler(nextIndex);\n    },\n    autoPlay: function autoPlay() {\n        if (this.state.autoPlayTimer) {\n            clearTimeout(this.state.autoPlayTimer);\n        }\n        if (this.props.autoplay) {\n            this.setState({\n                autoPlayTimer: setTimeout(this.play, this.props.autoplaySpeed)\n            });\n        }\n    },\n    pause: function pause() {\n        if (this.state.autoPlayTimer) {\n            clearTimeout(this.state.autoPlayTimer);\n            this.setState({\n                autoPlayTimer: null\n            });\n        }\n    }\n};\nexports[\"default\"] = helpers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/mixins/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/mixins/trackHelper.js":
/*!************************************************************!*\
  !*** ./node_modules/react-slick/lib/mixins/trackHelper.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.getTrackLeft = exports.getTrackAnimateCSS = exports.getTrackCSS = undefined;\nvar _reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar _reactDom2 = _interopRequireDefault(_reactDom);\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar checkSpecKeys = function checkSpecKeys(spec, keysArray) {\n    return keysArray.reduce(function(value, key) {\n        return value && spec.hasOwnProperty(key);\n    }, true) ? null : console.error(\"Keys Missing\", spec);\n};\nvar getTrackCSS = exports.getTrackCSS = function getTrackCSS(spec) {\n    checkSpecKeys(spec, [\n        \"left\",\n        \"variableWidth\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slideWidth\"\n    ]);\n    var trackWidth, trackHeight;\n    var trackChildren = spec.slideCount + 2 * spec.slidesToShow;\n    if (!spec.vertical) {\n        if (spec.variableWidth) {\n            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;\n        } else if (spec.centerMode) {\n            trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;\n        } else {\n            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;\n        }\n    } else {\n        trackHeight = trackChildren * spec.slideHeight;\n    }\n    var style = {\n        opacity: 1,\n        WebkitTransform: !spec.vertical ? \"translate3d(\" + spec.left + \"px, 0px, 0px)\" : \"translate3d(0px, \" + spec.left + \"px, 0px)\",\n        transform: !spec.vertical ? \"translate3d(\" + spec.left + \"px, 0px, 0px)\" : \"translate3d(0px, \" + spec.left + \"px, 0px)\",\n        transition: \"\",\n        WebkitTransition: \"\",\n        msTransform: !spec.vertical ? \"translateX(\" + spec.left + \"px)\" : \"translateY(\" + spec.left + \"px)\"\n    };\n    if (trackWidth) {\n        (0, _objectAssign2.default)(style, {\n            width: trackWidth\n        });\n    }\n    if (trackHeight) {\n        (0, _objectAssign2.default)(style, {\n            height: trackHeight\n        });\n    }\n    // Fallback for IE8\n    if (window && !window.addEventListener && window.attachEvent) {\n        if (!spec.vertical) {\n            style.marginLeft = spec.left + \"px\";\n        } else {\n            style.marginTop = spec.left + \"px\";\n        }\n    }\n    return style;\n};\nvar getTrackAnimateCSS = exports.getTrackAnimateCSS = function getTrackAnimateCSS(spec) {\n    checkSpecKeys(spec, [\n        \"left\",\n        \"variableWidth\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slideWidth\",\n        \"speed\",\n        \"cssEase\"\n    ]);\n    var style = getTrackCSS(spec);\n    // useCSS is true by default so it can be undefined\n    style.WebkitTransition = \"-webkit-transform \" + spec.speed + \"ms \" + spec.cssEase;\n    style.transition = \"transform \" + spec.speed + \"ms \" + spec.cssEase;\n    return style;\n};\nvar getTrackLeft = exports.getTrackLeft = function getTrackLeft(spec) {\n    checkSpecKeys(spec, [\n        \"slideIndex\",\n        \"trackRef\",\n        \"infinite\",\n        \"centerMode\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slidesToScroll\",\n        \"slideWidth\",\n        \"listWidth\",\n        \"variableWidth\",\n        \"slideHeight\"\n    ]);\n    var slideOffset = 0;\n    var targetLeft;\n    var targetSlide;\n    var verticalOffset = 0;\n    if (spec.fade) {\n        return 0;\n    }\n    if (spec.infinite) {\n        if (spec.slideCount >= spec.slidesToShow) {\n            slideOffset = spec.slideWidth * spec.slidesToShow * -1;\n            verticalOffset = spec.slideHeight * spec.slidesToShow * -1;\n        }\n        if (spec.slideCount % spec.slidesToScroll !== 0) {\n            if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {\n                if (spec.slideIndex > spec.slideCount) {\n                    slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;\n                    verticalOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideHeight * -1;\n                } else {\n                    slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;\n                    verticalOffset = spec.slideCount % spec.slidesToScroll * spec.slideHeight * -1;\n                }\n            }\n        }\n    } else {\n        if (spec.slideCount % spec.slidesToScroll !== 0) {\n            if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {\n                var slidesToOffset = spec.slidesToShow - spec.slideCount % spec.slidesToScroll;\n                slideOffset = slidesToOffset * spec.slideWidth;\n            }\n        }\n    }\n    if (spec.centerMode) {\n        if (spec.infinite) {\n            slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);\n        } else {\n            slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);\n        }\n    }\n    if (!spec.vertical) {\n        targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;\n    } else {\n        targetLeft = spec.slideIndex * spec.slideHeight * -1 + verticalOffset;\n    }\n    if (spec.variableWidth === true) {\n        var targetSlideIndex;\n        if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {\n            targetSlide = _reactDom2.default.findDOMNode(spec.trackRef).childNodes[spec.slideIndex];\n        } else {\n            targetSlideIndex = spec.slideIndex + spec.slidesToShow;\n            targetSlide = _reactDom2.default.findDOMNode(spec.trackRef).childNodes[targetSlideIndex];\n        }\n        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;\n        if (spec.centerMode === true) {\n            if (spec.infinite === false) {\n                targetSlide = _reactDom2.default.findDOMNode(spec.trackRef).children[spec.slideIndex];\n            } else {\n                targetSlide = _reactDom2.default.findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];\n            }\n            if (targetSlide) {\n                targetLeft = targetSlide.offsetLeft * -1 + (spec.listWidth - targetSlide.offsetWidth) / 2;\n            }\n        }\n    }\n    return targetLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/mixins/trackHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/slider.js":
/*!************************************************!*\
  !*** ./node_modules/react-slick/lib/slider.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _innerSlider = __webpack_require__(/*! ./inner-slider */ \"(ssr)/./node_modules/react-slick/lib/inner-slider.js\");\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nvar _json2mq = __webpack_require__(/*! json2mq */ \"(ssr)/./node_modules/json2mq/index.js\");\nvar _json2mq2 = _interopRequireDefault(_json2mq);\nvar _defaultProps = __webpack_require__(/*! ./default-props */ \"(ssr)/./node_modules/react-slick/lib/default-props.js\");\nvar _defaultProps2 = _interopRequireDefault(_defaultProps);\nvar _canUseDom = __webpack_require__(/*! can-use-dom */ \"(ssr)/./node_modules/can-use-dom/index.js\");\nvar _canUseDom2 = _interopRequireDefault(_canUseDom);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar enquire = _canUseDom2.default && __webpack_require__(/*! enquire.js */ \"(ssr)/./node_modules/enquire.js/src/index.js\");\nvar Slider = function(_React$Component) {\n    _inherits(Slider, _React$Component);\n    function Slider(props) {\n        _classCallCheck(this, Slider);\n        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n        _this.state = {\n            breakpoint: null\n        };\n        _this._responsiveMediaHandlers = [];\n        _this.innerSliderRefHandler = _this.innerSliderRefHandler.bind(_this);\n        return _this;\n    }\n    Slider.prototype.innerSliderRefHandler = function innerSliderRefHandler(ref) {\n        this.innerSlider = ref;\n    };\n    Slider.prototype.media = function media(query, handler) {\n        enquire.register(query, handler);\n        this._responsiveMediaHandlers.push({\n            query: query,\n            handler: handler\n        });\n    };\n    Slider.prototype.componentWillMount = function componentWillMount() {\n        var _this2 = this;\n        if (this.props.responsive) {\n            var breakpoints = this.props.responsive.map(function(breakpt) {\n                return breakpt.breakpoint;\n            });\n            breakpoints.sort(function(x, y) {\n                return x - y;\n            });\n            breakpoints.forEach(function(breakpoint, index) {\n                var bQuery;\n                if (index === 0) {\n                    bQuery = (0, _json2mq2.default)({\n                        minWidth: 0,\n                        maxWidth: breakpoint\n                    });\n                } else {\n                    bQuery = (0, _json2mq2.default)({\n                        minWidth: breakpoints[index - 1],\n                        maxWidth: breakpoint\n                    });\n                }\n                _canUseDom2.default && _this2.media(bQuery, function() {\n                    _this2.setState({\n                        breakpoint: breakpoint\n                    });\n                });\n            });\n            // Register media query for full screen. Need to support resize from small to large\n            var query = (0, _json2mq2.default)({\n                minWidth: breakpoints.slice(-1)[0]\n            });\n            _canUseDom2.default && this.media(query, function() {\n                _this2.setState({\n                    breakpoint: null\n                });\n            });\n        }\n    };\n    Slider.prototype.componentWillUnmount = function componentWillUnmount() {\n        this._responsiveMediaHandlers.forEach(function(obj) {\n            enquire.unregister(obj.query, obj.handler);\n        });\n    };\n    Slider.prototype.slickPrev = function slickPrev() {\n        this.innerSlider.slickPrev();\n    };\n    Slider.prototype.slickNext = function slickNext() {\n        this.innerSlider.slickNext();\n    };\n    Slider.prototype.slickGoTo = function slickGoTo(slide) {\n        this.innerSlider.slickGoTo(slide);\n    };\n    Slider.prototype.render = function render() {\n        var _this3 = this;\n        var settings;\n        var newProps;\n        if (this.state.breakpoint) {\n            newProps = this.props.responsive.filter(function(resp) {\n                return resp.breakpoint === _this3.state.breakpoint;\n            });\n            settings = newProps[0].settings === \"unslick\" ? \"unslick\" : (0, _objectAssign2.default)({}, this.props, newProps[0].settings);\n        } else {\n            settings = (0, _objectAssign2.default)({}, _defaultProps2.default, this.props);\n        }\n        var children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [\n                children\n            ];\n        }\n        // Children may contain false or null, so we should filter them\n        children = children.filter(function(child) {\n            return !!child;\n        });\n        if (settings === \"unslick\") {\n            // if 'unslick' responsive breakpoint setting used, just return the <Slider> tag nested HTML\n            return _react2.default.createElement(\"div\", {\n                className: this.props.className + \" unslicked\"\n            }, children);\n        } else {\n            return _react2.default.createElement(_innerSlider.InnerSlider, _extends({\n                ref: this.innerSliderRefHandler\n            }, settings), children);\n        }\n    };\n    return Slider;\n}(_react2.default.Component);\nexports[\"default\"] = Slider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/slider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/track.js":
/*!***********************************************!*\
  !*** ./node_modules/react-slick/lib/track.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.Track = undefined;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\nvar _classnames = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\nvar _classnames2 = _interopRequireDefault(_classnames);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar getSlideClasses = function getSlideClasses(spec) {\n    var slickActive, slickCenter, slickCloned;\n    var centerOffset, index;\n    if (spec.rtl) {\n        index = spec.slideCount - 1 - spec.index;\n    } else {\n        index = spec.index;\n    }\n    slickCloned = index < 0 || index >= spec.slideCount;\n    if (spec.centerMode) {\n        centerOffset = Math.floor(spec.slidesToShow / 2);\n        slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;\n        if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {\n            slickActive = true;\n        }\n    } else {\n        slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;\n    }\n    return (0, _classnames2.default)({\n        \"slick-slide\": true,\n        \"slick-active\": slickActive,\n        \"slick-center\": slickCenter,\n        \"slick-cloned\": slickCloned\n    });\n};\nvar getSlideStyle = function getSlideStyle(spec) {\n    var style = {};\n    if (spec.variableWidth === undefined || spec.variableWidth === false) {\n        style.width = spec.slideWidth;\n    }\n    if (spec.fade) {\n        style.position = \"relative\";\n        style.left = -spec.index * spec.slideWidth;\n        style.opacity = spec.currentSlide === spec.index ? 1 : 0;\n        style.transition = \"opacity \" + spec.speed + \"ms \" + spec.cssEase;\n        style.WebkitTransition = \"opacity \" + spec.speed + \"ms \" + spec.cssEase;\n    }\n    return style;\n};\nvar getKey = function getKey(child, fallbackKey) {\n    // key could be a zero\n    return child.key === null || child.key === undefined ? fallbackKey : child.key;\n};\nvar renderSlides = function renderSlides(spec) {\n    var key;\n    var slides = [];\n    var preCloneSlides = [];\n    var postCloneSlides = [];\n    var count = _react2.default.Children.count(spec.children);\n    _react2.default.Children.forEach(spec.children, function(elem, index) {\n        var child = void 0;\n        var childOnClickOptions = {\n            message: \"children\",\n            index: index,\n            slidesToScroll: spec.slidesToScroll,\n            currentSlide: spec.currentSlide\n        };\n        if (!spec.lazyLoad | (spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0)) {\n            child = elem;\n        } else {\n            child = _react2.default.createElement(\"div\", null);\n        }\n        var childStyle = getSlideStyle((0, _objectAssign2.default)({}, spec, {\n            index: index\n        }));\n        var slideClass = child.props.className || \"\";\n        var onClick = function onClick(e) {\n            child.props && child.props.onClick && child.props.onClick(e);\n            if (spec.focusOnSelect) {\n                spec.focusOnSelect(childOnClickOptions);\n            }\n        };\n        slides.push(_react2.default.cloneElement(child, {\n            key: \"original\" + getKey(child, index),\n            \"data-index\": index,\n            className: (0, _classnames2.default)(getSlideClasses((0, _objectAssign2.default)({\n                index: index\n            }, spec)), slideClass),\n            tabIndex: \"-1\",\n            style: (0, _objectAssign2.default)({\n                outline: \"none\"\n            }, child.props.style || {}, childStyle),\n            onClick: onClick\n        }));\n        // variableWidth doesn't wrap properly.\n        if (spec.infinite && spec.fade === false) {\n            var infiniteCount = spec.variableWidth ? spec.slidesToShow + 1 : spec.slidesToShow;\n            if (index >= count - infiniteCount) {\n                key = -(count - index);\n                preCloneSlides.push(_react2.default.cloneElement(child, {\n                    key: \"precloned\" + getKey(child, key),\n                    \"data-index\": key,\n                    className: (0, _classnames2.default)(getSlideClasses((0, _objectAssign2.default)({\n                        index: key\n                    }, spec)), slideClass),\n                    style: (0, _objectAssign2.default)({}, child.props.style || {}, childStyle),\n                    onClick: onClick\n                }));\n            }\n            if (index < infiniteCount) {\n                key = count + index;\n                postCloneSlides.push(_react2.default.cloneElement(child, {\n                    key: \"postcloned\" + getKey(child, key),\n                    \"data-index\": key,\n                    className: (0, _classnames2.default)(getSlideClasses((0, _objectAssign2.default)({\n                        index: key\n                    }, spec)), slideClass),\n                    style: (0, _objectAssign2.default)({}, child.props.style || {}, childStyle),\n                    onClick: onClick\n                }));\n            }\n        }\n    });\n    if (spec.rtl) {\n        return preCloneSlides.concat(slides, postCloneSlides).reverse();\n    } else {\n        return preCloneSlides.concat(slides, postCloneSlides);\n    }\n};\nvar Track = exports.Track = function(_React$Component) {\n    _inherits(Track, _React$Component);\n    function Track() {\n        _classCallCheck(this, Track);\n        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n    }\n    Track.prototype.render = function render() {\n        var slides = renderSlides.call(this, this.props);\n        return _react2.default.createElement(\"div\", {\n            className: \"slick-track\",\n            style: this.props.trackStyle\n        }, slides);\n    };\n    return Track;\n}(_react2.default.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/track.js\n");

/***/ })

};
;